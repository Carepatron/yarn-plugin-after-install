/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-after-install",
factory: function (require) {
"use strict";var plugin=(()=>{var _=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var u=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var E=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),G=(e,t)=>{for(var r in t)_(e,r,{get:t[r],enumerable:!0})},M=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of F(t))!L.call(e,s)&&s!==r&&_(e,s,{get:()=>t[s],enumerable:!(o=P(t,s))||o.enumerable});return e};var S=e=>M(_({},"__esModule",{value:!0}),e);var w=E((me,U)=>{U.exports={name:"dotenv",version:"16.4.5",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var A=E((he,f)=>{var N=u("fs"),D=u("path"),B=u("os"),q=u("crypto"),H=w(),y=H.version,W=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function J(e){let t={},r=e.toString();r=r.replace(/\r\n?/mg,`
`);let o;for(;(o=W.exec(r))!=null;){let s=o[1],n=o[2]||"";n=n.trim();let a=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),a==='"'&&(n=n.replace(/\\n/g,`
`),n=n.replace(/\\r/g,"\r")),t[s]=n}return t}function Q(e){let t=C(e),r=c.configDotenv({path:t});if(!r.parsed){let a=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw a.code="MISSING_DATA",a}let o=k(e).split(","),s=o.length,n;for(let a=0;a<s;a++)try{let i=o[a].trim(),l=Z(r,i);n=c.decrypt(l.ciphertext,l.key);break}catch(i){if(a+1>=s)throw i}return c.parse(n)}function z(e){console.log(`[dotenv@${y}][INFO] ${e}`)}function X(e){console.log(`[dotenv@${y}][WARN] ${e}`)}function h(e){console.log(`[dotenv@${y}][DEBUG] ${e}`)}function k(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function Z(e,t){let r;try{r=new URL(t)}catch(i){if(i.code==="ERR_INVALID_URL"){let l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw i}let o=r.password;if(!o){let i=new Error("INVALID_DOTENV_KEY: Missing key part");throw i.code="INVALID_DOTENV_KEY",i}let s=r.searchParams.get("environment");if(!s){let i=new Error("INVALID_DOTENV_KEY: Missing environment part");throw i.code="INVALID_DOTENV_KEY",i}let n=`DOTENV_VAULT_${s.toUpperCase()}`,a=e.parsed[n];if(!a){let i=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw i.code="NOT_FOUND_DOTENV_ENVIRONMENT",i}return{ciphertext:a,key:o}}function C(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let r of e.path)N.existsSync(r)&&(t=r.endsWith(".vault")?r:`${r}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=D.resolve(process.cwd(),".env.vault");return N.existsSync(t)?t:null}function x(e){return e[0]==="~"?D.join(B.homedir(),e.slice(1)):e}function ee(e){z("Loading env from encrypted .env.vault");let t=c._parseVault(e),r=process.env;return e&&e.processEnv!=null&&(r=e.processEnv),c.populate(r,t,e),{parsed:t}}function te(e){let t=D.resolve(process.cwd(),".env"),r="utf8",o=Boolean(e&&e.debug);e&&e.encoding?r=e.encoding:o&&h("No encoding is specified. UTF-8 is used by default");let s=[t];if(e&&e.path)if(!Array.isArray(e.path))s=[x(e.path)];else{s=[];for(let l of e.path)s.push(x(l))}let n,a={};for(let l of s)try{let p=c.parse(N.readFileSync(l,{encoding:r}));c.populate(a,p,e)}catch(p){o&&h(`Failed to load ${l} ${p.message}`),n=p}let i=process.env;return e&&e.processEnv!=null&&(i=e.processEnv),c.populate(i,a,e),n?{parsed:a,error:n}:{parsed:a}}function re(e){if(k(e).length===0)return c.configDotenv(e);let t=C(e);return t?c._configVault(e):(X(`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`),c.configDotenv(e))}function ne(e,t){let r=Buffer.from(t.slice(-64),"hex"),o=Buffer.from(e,"base64"),s=o.subarray(0,12),n=o.subarray(-16);o=o.subarray(12,-16);try{let a=q.createDecipheriv("aes-256-gcm",r,s);return a.setAuthTag(n),`${a.update(o)}${a.final()}`}catch(a){let i=a instanceof RangeError,l=a.message==="Invalid key length",p=a.message==="Unsupported state or unable to authenticate data";if(i||l){let g=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw g.code="INVALID_DOTENV_KEY",g}else if(p){let g=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw g.code="DECRYPTION_FAILED",g}else throw a}}function oe(e,t,r={}){let o=Boolean(r&&r.debug),s=Boolean(r&&r.override);if(typeof t!="object"){let n=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw n.code="OBJECT_REQUIRED",n}for(let n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(s===!0&&(e[n]=t[n]),o&&h(s===!0?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}var c={configDotenv:te,_configVault:ee,_parseVault:Q,config:re,decrypt:ne,parse:J,populate:oe};f.exports.configDotenv=c.configDotenv;f.exports._configVault=c._configVault;f.exports._parseVault=c._parseVault;f.exports.config=c.config;f.exports.decrypt=c.decrypt;f.exports.parse=c.parse;f.exports.populate=c.populate;f.exports=c});var $=E((_e,j)=>{var d={};process.env.DOTENV_CONFIG_ENCODING!=null&&(d.encoding=process.env.DOTENV_CONFIG_ENCODING);process.env.DOTENV_CONFIG_PATH!=null&&(d.path=process.env.DOTENV_CONFIG_PATH);process.env.DOTENV_CONFIG_DEBUG!=null&&(d.debug=process.env.DOTENV_CONFIG_DEBUG);process.env.DOTENV_CONFIG_OVERRIDE!=null&&(d.override=process.env.DOTENV_CONFIG_OVERRIDE);process.env.DOTENV_CONFIG_DOTENV_KEY!=null&&(d.DOTENV_KEY=process.env.DOTENV_CONFIG_DOTENV_KEY);j.exports=d});var R=E((Ne,K)=>{var se=/^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/;K.exports=function(t){return t.reduce(function(r,o){let s=o.match(se);return s&&(r[s[1]]=s[2]),r},{})}});var le={};G(le,{default:()=>ce});var Y=u("@yarnpkg/core");var I=u("@yarnpkg/core"),O={afterInstall:{description:"Hook that will always run after install",type:I.SettingsType.STRING,default:""}};var T=u("clipanion"),b=u("@yarnpkg/core");var V=u("@yarnpkg/shell"),m=async(e,t)=>{let r=e.get("afterInstall"),o=!!e.projectCwd?.endsWith(`dlx-${process.pid}`);return r&&!o?(t&&console.log("Running `afterInstall` hook..."),(0,V.execute)(r,[],{cwd:e.projectCwd||void 0})):0};var v=class extends T.Command{async execute(){let t=await b.Configuration.find(this.context.cwd,this.context.plugins);return m(t,!1)}};v.paths=[["after-install"]];(function(){A().config(Object.assign({},$(),R()(process.argv)))})();var ae=process.env.CI==="true",ie={configuration:O,commands:[v],hooks:{afterAllInstalled:async(e,t)=>{if(t?.mode===Y.InstallMode.UpdateLockfile||ae){console.log("Skipping `afterInstall` hook because we are in CI or the mode is `update-lockfile`");return}if(await m(e.configuration,!0))throw new Error("The `afterInstall` hook failed, see output above.")}}},ce=ie;return S(le);})();
return plugin;
}
};
